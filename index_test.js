//************************************************** */
'use strict';
require('dotenv').config();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// const ccxt = require ('ccxt');
const ccxt_1 = __importDefault(require("ccxt"));
const grammy_1 = require("grammy");
const express_1 = __importDefault(require("express"));
const TOKEN = process.env.TELEGRAM_TOKEN || "";
const KEY = process.env.API_KEY || "";
const SECRET = process.env.API_SECRET || "";
const NODE_ENV = process.env.NODE_ENV || "dev";
const binance = new ccxt_1.default.binanceusdm({
    apiKey: KEY,
    secret: SECRET
});
//=====================================
//  üôÖ‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÇÔ∏èüëâüåü‚ö°Ô∏èüí•üí∞‚öôÔ∏èüõ†üìàüìâ‚ùáÔ∏è‚ö†Ô∏è‚ùóÔ∏èüëÜüëá
//=====================================

// –°–∫–æ–ª—å–∫–æ –∑–Ω–∞–∫–æ–≤ —É —á–∏—Å–ª–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
/**
* Example: (5) => 0
* Example: (0.5) => 1
* Example: digits(0.00005) => 5
**/
const howManyDigits = (x) => {
	return ( (x.toString().includes('.')) ? (x.toString().split('.').pop().length) : (0) );
}
// -------------------------------------------
// howManyDigits() –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
// -------------------------------------------

// –û–∫—Ä—É–≥–ª—è–µ–º —Å –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é –í–í–ï–†–•
/**
* Example: (57, 10) => 60
* @param {Number} number
* @param {Number} precision
* @returns {Number}
*/
const roundUp = (number, precision) => {
¬† ¬†return Math.ceil(number / precision) * precision;
}
// -------------------------------------------
// roundUp() –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
// -------------------------------------------
   
// –û–∫—Ä—É–≥–ª—è–µ–º —Å –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é –í–ù–ò–ó
/**
 * Example: (57, 10) => 50
 * @param {Number} number
 * @param {Number} precision
 * @returns {Number}
 */
const roundDown = (number, precision) => {
¬† ¬†return Math.floor(number / precision) * precision;
}
// -------------------------------------------
// roundDown() –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
// -------------------------------------------

// –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤
const  roundPlus = (x, n) => { 			//x - —á–∏—Å–ª–æ, n - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤
    // if(isNaN(x) || isNaN(n)) return false;
    var m = Math.pow(10,n);
    return Math.round(x*m)/m;
}
// -------------------------------------------
// roundPlus() –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
// -------------------------------------------

const getBalance = async () => {
    console.log("NODE_ENV: " + NODE_ENV);
    console.log("Checking Binance Balance...");
    // console.log("***********************");
    // console.log("API_KEY: " + KEY);
    // console.log("CCXT Binance API_KEY: " + binance.apiKey);
    // console.log("API_SECRET:" + SECRET);
    // console.log("CCXT Binance API_SECRET:" + binance.secret);
    // console.log("***********************");
    try {
        const balance = await binance.fetchBalance();
        console.log("Balance: ", balance.USDT);
        const balanceMSG = `<u>üí∞ <b>–ë–∞–ª–∞–Ω—Å</b> üí∞</u>
        üëâ –¥–æ—Å—Ç—É–ø–Ω–æ =>  ${balance.USDT.free}$ 
        üëâ –∑–∞–Ω—è—Ç–æ      =>  ${balance.USDT.used}$ 
        üëâ –≤—Å–µ–≥–æ        =>  ${balance.USDT.total}$`;
        return balanceMSG;
    }
    catch (error) {
        console.log("Error:", error);
    }
};
const getOrders = async () => {
    console.log("NODE_ENV: " + NODE_ENV);
    console.log("Checking Binance Orders...");
    // console.log("***********************");
    // console.log("API_KEY: " + KEY);
    // console.log("CCXT Binance API_KEY: " + binance.apiKey);
    // console.log("API_SECRET:" + SECRET);
    // console.log("CCXT Binance API_SECRET:" + binance.secret);
    // console.log("***********************");
    try {
        const orders = await binance.fetchOrders();
        console.log("Orders: ", orders);
        return orders;
    }
    catch (error) {
        console.log("Error:", error);
    }
};
const getPositions = async () => {
    console.log("NODE_ENV: " + NODE_ENV);
    console.log("Checking Binance Positions...");
    // console.log("***********************");
    // console.log("API_KEY: " + KEY);
    // console.log("CCXT Binance API_KEY: " + binance.apiKey);
    // console.log("API_SECRET:" + SECRET);
    // console.log("CCXT Binance API_SECRET:" + binance.secret);
    // console.log("***********************");
    const poses = [{}];
    let posesSTR = `<u>üåü <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ü–æ–∑–∏—Ü–∏–∏</b> üåü</u>
    `;
    try {
        const positions = await binance.fetchPositions();
        positions.forEach(function (pos) {
            if (pos.contracts > 0) {
                // console.log ("Positions: ", pos.contracts, pos.info);
                poses.push(pos.info);
            }
        });
        // console.log ("Open Positions: ", poses);
        // return poses;
    }
    catch (error) {
        console.log("Error:", error);
    }
    if (poses.length == 1) {
        return "üôÖ‚Äç‚ôÇÔ∏è –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç! üôÖ‚Äç‚ôÇÔ∏è";
    }
    poses.forEach( pos => {
        console.log("Cur Pos is: ", pos)
        if (typeof pos != "undefined" && pos != {} && typeof pos.symbol != "undefined") {
            const entryPrice = parseFloat(pos.entryPrice);
            const unPnL = parseFloat(pos.unRealizedProfit);
            const posSize = parseFloat(pos.positionAmt);
            const calcPrice = (pos.positionSide == "LONG") ? roundPlus(entryPrice + unPnL / posSize, 8) : roundPlus(entryPrice - unPnL / posSize, 8);
            console.log("\n\n*********\nSide:", pos.positionSide, "| calcPrice:", calcPrice, "| entryPrice:", entryPrice, "| unPnL:", unPnL, "| Size:", posSize);
            console.log("devide:", (unPnL / posSize), "| plus:", (entryPrice + unPnL / posSize), "| minus:", (entryPrice - unPnL / posSize), "\n**********\n\n");
            const _posStr = `
            üí• <b>${pos.symbol}</b> üí• => ${pos.positionSide=="LONG"?" üìà ":" üìâ "}
                => PnL: ${pos.unRealizedProfit}$
                => Size: ${Math.abs(pos.positionAmt)}
                => AvgPrice: ${pos.entryPrice}$
                => markPrice: ${pos.markPrice}$
                => calcPrice: ${calcPrice}$
            `;
            posesSTR = posesSTR + _posStr;
        }
    });

    return posesSTR;
};
// Create a bot using the Telegram token
const bot = new grammy_1.Bot(TOKEN);
// Handle the /yo command to greet the user
bot.command("yo", (ctx) => { var _a; return ctx.reply(`Yo ${(_a = ctx.from) === null || _a === void 0 ? void 0 : _a.username}`); });
// Handle the /about command
const buttonsKeyboard = new grammy_1.InlineKeyboard()
    .text("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ü–æ–∑–∏—Ü–∏–∏", "check_positions").row()
    // .text("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –û—Ä–¥–µ—Ä–∞", "check_orders").row()
    .text("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–∞–ª–∞–Ω—Å", "check_balance").row();
// .text("...—Ç–µ—Å—Ç...", "check_info").row();
// Suggest commands in the menu
bot.api.setMyCommands([
    {
        command: "start",
        description: "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"
    }
]);
// Handle all other messages and the /start command
const replyWithIntro = (ctx) => {
    var _a;
    const introductionMessage = `
    <b>–ü—Ä–∏–≤–µ—Ç, ${(_a = ctx.from) === null || _a === void 0 ? void 0 : _a.username}!</b>
–Ø —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
—Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞
    <u><b>Binance USDT-Futures!</b></u>
    `;
    ctx.reply(introductionMessage, {
        reply_markup: buttonsKeyboard,
        parse_mode: "HTML",
    });
    console.log("Bot have got START-command!");
    // console.log("***********************");
    // console.log("API_KEY: " + KEY);
    // console.log("CCXT Binance API_KEY: " + binance.apiKey);
    // console.log("API_SECRET:" + SECRET);
    // console.log("CCXT Binance API_SECRET:" + binance.secret);
    // console.log("***********************");
};
const replyWithButtons = (ctx) => {
    ctx.reply("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:", {
        reply_markup: buttonsKeyboard,
        parse_mode: "HTML",
    });
    console.log("Telegram Bot is working...");
    console.log("***********************");
    console.log("API_KEY: " + KEY);
    console.log("CCXT Binance API_KEY: " + binance.apiKey);
    console.log("API_SECRET:" + SECRET);
    console.log("CCXT Binance API_SECRET:" + binance.secret);
    console.log("***********************");
};
bot.command("start", replyWithIntro);
// bot.on("message", replyWithIntro);
bot.on("message", replyWithButtons);
// Wait for click events with specific callback data.
bot.callbackQuery("check_positions", async (ctx) => {
    const info = await getPositions();
    ctx.reply(info, {
        parse_mode: "HTML",
    });
});
bot.callbackQuery("check_balance", async (ctx) => {
    const info = await getBalance();
    ctx.reply(info, {
        parse_mode: "HTML",
    });
});

// –í—Å–µ DETA-–ø—Ä–æ–µ–∫—Ç—ã –±–∞–∑–∏—Ä—É—é—Ç—Å—è –Ω–∞ Express-–≤–µ–±—Å–µ—Ä–≤–µ—Ä–µ!!!
const app = (0, express_1.default)();

//******************************* */
// –ü—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –†–ê–ó–†–ê–ë–û–¢–ö–ï –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —Ä–µ–∂–∏–º –û–ë–´–ß–ù–û–ì–û –±–æ—Ç–∞, –Ω–µ —á–µ—Ä–µ–∑ –í–µ–±–•—É–∫–∏!
//******************************* */
// Start the server
if (process.env.NODE_ENV === "production") {
    // Use Webhooks for the production server
    const app = (0, express_1.default)();
    app.use(express_1.default.json());
    app.use((0, grammy_1.webhookCallback)(bot, "express"));
    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => {
        console.log(`Bot listening on port ${PORT}`);
        console.log("***********************");
        console.log("API_KEY: " + KEY);
        console.log("CCXT Binance API_KEY: " + binance.apiKey);
        console.log("API_SECRET:" + SECRET);
        console.log("CCXT Binance API_SECRET:" + binance.secret);
        console.log("***********************");
    });
}
else {
    // Use Long Polling for development
    bot.start();
}
//************************************ */

// //******************************* */
// // –ù–æ –¥–ª—è –ü–†–û–î–ê–ö–®–ï–ù–ê —É –Ω–∞—Å –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–±–æ—Ä–∞ –≤–æ–æ–±—â–µ. –ö–∞–∫–æ–π —Ç–∞–º –Ω–∞—Ñ–∏–≥ –ë–û–¢ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ?
// // –¢–æ–ª—å–∫–æ –ª–∏—à—å –∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –ª–∏—à—å –≤ –≤–∏–¥–µ –≤–µ–±—Ö—É–∫–æ–≤!!!

// // Start the server
// // Use Webhooks for the production server
// app.use(express_1.default.json());
// app.use((0, grammy_1.webhookCallback)(bot, "express"));
// const PORT = process.env.PORT || 3000;
// app.listen(PORT, () => {
//     console.log(`Bot listening on port ${PORT}`);
//     console.log("***********************");
//     console.log("NODE_ENV: " + NODE_ENV);
//     console.log("API_KEY: " + KEY);
//     console.log("CCXT Binance API_KEY: " + binance.apiKey);
//     console.log("API_SECRET:" + SECRET);
//     console.log("CCXT Binance API_SECRET:" + binance.secret);
//     console.log("***********************");
// });
// //******************************* */




//*************************************************************** */
// –ù—É –∏ –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ DETA-–ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–¥–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Express-App
module.exports = app